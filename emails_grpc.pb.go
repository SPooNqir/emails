// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package emails

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailsClient is the client API for Emails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailsClient interface {
	SendTemplate(ctx context.Context, in *EmailTemplate, opts ...grpc.CallOption) (*EmailTemplate, error)
}

type emailsClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailsClient(cc grpc.ClientConnInterface) EmailsClient {
	return &emailsClient{cc}
}

func (c *emailsClient) SendTemplate(ctx context.Context, in *EmailTemplate, opts ...grpc.CallOption) (*EmailTemplate, error) {
	out := new(EmailTemplate)
	err := c.cc.Invoke(ctx, "/emails.Emails/SendTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailsServer is the server API for Emails service.
// All implementations must embed UnimplementedEmailsServer
// for forward compatibility
type EmailsServer interface {
	SendTemplate(context.Context, *EmailTemplate) (*EmailTemplate, error)
	mustEmbedUnimplementedEmailsServer()
}

// UnimplementedEmailsServer must be embedded to have forward compatible implementations.
type UnimplementedEmailsServer struct {
}

func (UnimplementedEmailsServer) SendTemplate(context.Context, *EmailTemplate) (*EmailTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTemplate not implemented")
}
func (UnimplementedEmailsServer) mustEmbedUnimplementedEmailsServer() {}

// UnsafeEmailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailsServer will
// result in compilation errors.
type UnsafeEmailsServer interface {
	mustEmbedUnimplementedEmailsServer()
}

func RegisterEmailsServer(s grpc.ServiceRegistrar, srv EmailsServer) {
	s.RegisterService(&Emails_ServiceDesc, srv)
}

func _Emails_SendTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).SendTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.Emails/SendTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).SendTemplate(ctx, req.(*EmailTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

// Emails_ServiceDesc is the grpc.ServiceDesc for Emails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emails.Emails",
	HandlerType: (*EmailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTemplate",
			Handler:    _Emails_SendTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emails.proto",
}
